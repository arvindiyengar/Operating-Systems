#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
#include<unistd.h>
#include<sys/types.h>
#include<signal.h>
#include<assert.h>
#include<errno.h>
#include<time.h>
int sharedmemory;
sem_t prodlock,conslock;
int produce_item();
void put(int);
int get();
void *producer()
{
int item;
while(1)
{
item=produce_item();
sem_wait(&prodlock);
put(item);
printf("Producer Produced %d \n",item);
sem_post(&conslock);
}
}
void *consumer()
{
int item;
while(1)
{
sleep(1);
sem_wait(&conslock);
item=get();
printf("Consumer Consumed %d",item);
sem_post(&prodlock);
}
}
int produce_item()
{
static int a=100;
return a++;
}
void put(int item)
{
sharedmemory=item;
}
int get()
{
int item=sharedmemory;
sharedmemory=0;
return item;
}
int main()
{
pthread_attr_t *attr=NULL;
pthread_t pid;
pthread_t cid;
sem_init(&prodlock,0,1);
sem_init(&conslock,0,0);
pthread_create(&pid,attr,producer,0);
pthread_create(&cid,attr,consumer,0);
pthread_join(pid,NULL);
pthread_join(cid,NULL);
return 0;
}
